{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LinearGradient = LinearGradient;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _NativeLinearGradient = _interopRequireDefault(require(\"./NativeLinearGradient\"));\n\nfunction LinearGradient(_ref) {\n  var colors = _ref.colors,\n      locations = _ref.locations,\n      start = _ref.start,\n      end = _ref.end,\n      props = (0, _objectWithoutProperties2.default)(_ref, [\"colors\", \"locations\", \"start\", \"end\"]);\n\n  if (locations && colors.length !== locations.length) {\n    console.warn('LinearGradient colors and locations props should be arrays of the same length');\n    locations = locations.slice(0, colors.length);\n  }\n\n  return React.createElement(_NativeLinearGradient.default, (0, _extends2.default)({}, props, {\n    colors: _reactNative.Platform.select({\n      web: colors,\n      default: colors.map(_reactNative.processColor)\n    }),\n    locations: locations,\n    startPoint: _normalizePoint(start),\n    endPoint: _normalizePoint(end)\n  }));\n}\n\nfunction _normalizePoint(point) {\n  if (!point) {\n    return undefined;\n  }\n\n  if (Array.isArray(point) && point.length !== 2) {\n    console.warn('start and end props for LinearGradient must be of the format [x,y] or {x, y}');\n    return undefined;\n  }\n\n  return Array.isArray(point) ? point : [point.x, point.y];\n}","map":{"version":3,"sources":["../src/LinearGradient.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AA8CM,SAAU,cAAV,OAMyC;AAAA,MAL7C,MAK6C,QAL7C,MAK6C;AAAA,MAJ7C,SAI6C,QAJ7C,SAI6C;AAAA,MAH7C,KAG6C,QAH7C,KAG6C;AAAA,MAF7C,GAE6C,QAF7C,GAE6C;AAAA,MAD1C,KAC0C;;AAC7C,MAAI,SAAS,IAAI,MAAM,CAAC,MAAP,KAAkB,SAAS,CAAC,MAA7C,EAAqD;AACnD,IAAA,OAAO,CAAC,IAAR,CAAa,+EAAb;AACA,IAAA,SAAS,GAAG,SAAS,CAAC,KAAV,CAAgB,CAAhB,EAAmB,MAAM,CAAC,MAA1B,CAAZ;AACD;;AAED,SACE,KAAA,CAAA,aAAA,CAAC,6BAAD,EAAqB,uBAAA,EAAA,EACf,KADe,EACV;AACT,IAAA,MAAM,EAAE,sBAAS,MAAT,CAAgB;AACtB,MAAA,GAAG,EAAE,MADiB;AAEtB,MAAA,OAAO,EAAE,MAAM,CAAC,GAAP,CAAW,yBAAX;AAFa,KAAhB,CADC;AAKT,IAAA,SAAS,EAAE,SALF;AAMT,IAAA,UAAU,EAAE,eAAe,CAAC,KAAD,CANlB;AAOT,IAAA,QAAQ,EAAE,eAAe,CAAC,GAAD;AAPhB,GADU,CAArB,CADF;AAYD;;AAED,SAAS,eAAT,CACE,KADF,EAC+C;AAE7C,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,SAAP;AACD;;AAED,MAAI,KAAK,CAAC,OAAN,CAAc,KAAd,KAAwB,KAAK,CAAC,MAAN,KAAiB,CAA7C,EAAgD;AAC9C,IAAA,OAAO,CAAC,IAAR,CAAa,8EAAb;AACA,WAAO,SAAP;AACD;;AAED,SAAO,KAAK,CAAC,OAAN,CAAc,KAAd,IAAuB,KAAvB,GAA+B,CAAC,KAAK,CAAC,CAAP,EAAU,KAAK,CAAC,CAAhB,CAAtC;AACD","sourcesContent":["import * as React from 'react';\nimport { Platform, processColor, View } from 'react-native';\n\nimport NativeLinearGradient from './NativeLinearGradient';\nimport { NativeLinearGradientPoint } from './NativeLinearGradient.types';\n\nexport type LinearGradientPoint = { x: number; y: number } | NativeLinearGradientPoint;\n\nexport type LinearGradientProps = {\n  /**\n   * An array of colors that represent stops in the gradient. At least two colors are required\n   * (for a single-color background, use the `style.backgroundColor` prop on a `View` component).\n   */\n  colors: string[];\n  /**\n   * An array that contains `number`s ranging from 0 to 1, inclusive, and is the same length as the `colors` property.\n   * Each number indicates a color-stop location where each respective color should be located.\n   *\n   * For example, `[0.5, 0.8]` would render:\n   * - the first color, solid, from the beginning of the gradient view to 50% through (the middle);\n   * - a gradient from the first color to the second from the 50% point to the 80% point; and\n   * - the second color, solid, from the 80% point to the end of the gradient view.\n   *\n   * The color-stop locations must be ascending from least to greatest.\n   */\n  locations?: number[] | null;\n  /**\n   * An object `{ x: number; y: number }` or array `[x, y]` that represents the point\n   * at which the gradient starts, as a fraction of the overall size of the gradient ranging from 0 to 1, inclusive.\n   *\n   * For example, `{ x: 0.1, y: 0.2 }` means that the gradient will start `10%` from the left and `20%` from the top.\n   *\n   * **On web**, this only changes the angle of the gradient because CSS gradients don't support changing the starting position.\n   */\n  start?: LinearGradientPoint | null;\n  /**\n   * An object `{ x: number; y: number }` or array `[x, y]` that represents the point\n   * at which the gradient ends, as a fraction of the overall size of the gradient ranging from 0 to 1, inclusive.\n   *\n   * For example, `{ x: 0.1, y: 0.2 }` means that the gradient will end `10%` from the left and `20%` from the bottom.\n   *\n   * **On web**, this only changes the angle of the gradient because CSS gradients don't support changing the end position.\n   */\n  end?: LinearGradientPoint | null;\n} & React.ComponentProps<typeof View>;\n\n/**\n * Renders a native view that transitions between multiple colors in a linear direction.\n */\nexport function LinearGradient({\n  colors,\n  locations,\n  start,\n  end,\n  ...props\n}: React.PropsWithChildren<LinearGradientProps>): React.ReactElement {\n  if (locations && colors.length !== locations.length) {\n    console.warn('LinearGradient colors and locations props should be arrays of the same length');\n    locations = locations.slice(0, colors.length);\n  }\n\n  return (\n    <NativeLinearGradient\n      {...props}\n      colors={Platform.select({\n        web: colors as any,\n        default: colors.map(processColor),\n      })}\n      locations={locations}\n      startPoint={_normalizePoint(start)}\n      endPoint={_normalizePoint(end)}\n    />\n  );\n}\n\nfunction _normalizePoint(\n  point: LinearGradientPoint | null | undefined\n): [number, number] | undefined {\n  if (!point) {\n    return undefined;\n  }\n\n  if (Array.isArray(point) && point.length !== 2) {\n    console.warn('start and end props for LinearGradient must be of the format [x,y] or {x, y}');\n    return undefined;\n  }\n\n  return Array.isArray(point) ? point : [point.x, point.y];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}